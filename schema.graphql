enum FungibleTokenType {
  External
  Point
  Base
}

type FungibleTokenMetadata @entity {
  id: ID!
  URI: String!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

# Performant many to many relationship of App and fungibleToken, see https://thegraph.com/docs/en/developing/creating-a-subgraph/#example-1
type AppFungibleToken @entity {
  id: ID!
  app: App!
  token: FungibleToken!
}

type FungibleToken @entity {
  id: ID!
  name: String!
  owner: User!
  symbol: String!
  decimals: Int!
  metadata: FungibleTokenMetadata
  tokenType: FungibleTokenType!
  """
  DEPRECATED: The `app` field has been deprecated as app-token is a many to many relationship, please use `apps` instead.
  """
  app: App @deprecated(reason: "The `app` field has been deprecated as app-token is a many to many relationship, please use `apps` instead.")
  apps: [AppFungibleToken!] @derivedFrom(field: "token")
  totalSupply: BigInt!
  burntSupply: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type FungibleTokenBalance @entity {
  id: ID!
  user: User!
  token: FungibleToken!
  balance: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type App @entity {
  id: ID!
  name: String!
  metadata: AppMetadata
  owner: User!
  xpToken: FungibleToken
  badges: [Badge!] @derivedFrom(field: "app")
  badgeCount: BigInt!
  badgesAwarded: BigInt!
  tokens: [AppFungibleToken!] @derivedFrom(field: "app")
  requiredTokenBalance: [RequiredTokenBalance!] @derivedFrom(field: "app")
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type AppMetadata @entity {
  id: ID!
  name: String!
  description: String!
  URI: String!
  createdAt: BigInt!
  createdAtBlock: BigInt!
}

type RequiredTokenBalance @entity {
  id: ID!
  app: App!
  token: FungibleToken!
  balance: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type BadgeToken @entity {
  id: ID!
  tokenId: BigInt!
  badge: Badge!
  metadataURI: String
  owner: User
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type Badge @entity {
  id: ID!
  name: String!
  symbol: String!
  metadataURI: String
  tokens: [BadgeToken!] @derivedFrom(field: "badge")
  app: App!
  royaltyBps: BigInt!
  royaltyRecipient: Bytes!
  totalAwarded: BigInt!
  totalAvailable: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type User @entity {
  id: ID!
  tokenBalances: [FungibleTokenBalance!] @derivedFrom(field: "user")
  collectedBadges: [BadgeToken!] @derivedFrom(field: "owner")
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
  updatedAtBlock: BigInt!
}

type Reward @entity (immutable: true) {
  id: ID!
  app: App!
  rewardId: String!
  rewardType: String!
  metadataURI: String!
  user: User!
  token: FungibleToken
  tokenAmount: BigInt!
  badge: Badge
  badges: [BadgeToken!]
  badgeCount: Int!
  transactionHash: String!
  createdAt: BigInt!
  createdAtBlock: BigInt!
}

"""
DEPRECATED: The `Action` entity has been deprecated as please query the `Reward` entity with `rewardType: "ACTION"` instead.
"""
type Action @entity {
  id: ID!
  metadata: ActionMetadata
  app: App
  user: User!
  xp_rewarded: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!
}

"""
DEPRECATED: The `ActionMetadata` entity has been deprecated as please query the `Reward` with `rewardType: "ACTION"` instead.
"""
type ActionMetadata @entity {
  id: ID!
  name: String
  URI: String!
}

"""
DEPRECATED: The `MissionFungibleToken` entity has been deprecated as please query the `Reward` entity instead.
"""
type MissionFungibleToken @entity {
  id: ID!
  token: FungibleToken!
  mission: Mission!
  amount_rewarded: BigInt!
}

"""
DEPRECATED: The `MissionMetadata` entity has been deprecated as please query the `Reward` entity with `rewardType: "MISSION"` instead.
"""
type MissionMetadata @entity {
  id: ID!
  name: String
  URI: String!
}

"""
DEPRECATED: The `Mission` entity has been deprecated as please query the `Reward` entity with `rewardType: "MISSION"` instead.
"""
type Mission @entity {
  id: ID!
  metadata: MissionMetadata
  app: App
  user: User
  xp_rewarded: BigInt!
  badges: [BadgeToken!]!
  tokens: [MissionFungibleToken!] @derivedFrom(field: "mission")
  createdAt: BigInt!
  createdAtBlock: BigInt!
}

type Charge @entity(immutable: true) {
  id: ID!
  app: App!
  user: User!
  token: FungibleToken!
  amount: BigInt!
  chargeId: String!
  chargeType: String!
  createdAt: BigInt!
  createdAtBlock: BigInt!
}
